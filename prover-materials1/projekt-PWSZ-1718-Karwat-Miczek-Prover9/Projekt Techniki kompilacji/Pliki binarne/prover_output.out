============================== Prover9 ===============================
Prover9 (64) version 2009-11A, November 2009.
Process 2334 was started by dawid on dawid-P553UJ,
Mon Jan 22 15:06:19 2018
The command was "prover9 -f prover_input.in".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file prover_input.in


formulas(assumptions).
Wilk(x) -> zwierze(x).
Lis(x) -> zwierze(x).
Ptak(x) -> zwierze(x).
Gasienica(x) -> zwierze(x).
Slimak(x) -> zwierze(x).
Ziarno(x) -> roslina(x).
(exists x Wilk(x)).
(exists x Lis(x)).
(exists x Ptak(x)).
(exists x Gasienica(x)).
(exists x Slimak(x)).
(exists x Ziarno(x)).
(all x (zwierze(x) -> (all y (roslina(y) -> jadalna(x,y))) | (all z (zwierze(z) & mniejsze(z,x) & (exists u (roslina(u) & jadalna(z,u))) -> jadalna(x,z))))).
Gasienica(x) & Ptak(y) -> mniejsze(x,y).
Slimak(x) & Ptak(y) -> mniejsze(x,y).
Ptak(x) & Lis(y) -> mniejsze(x,y).
Lis(x) & Wilk(y) -> mniejsze(x,y).
Ptak(x) & Gasienica(y) -> jadalna(x,y).
Gasienica(x) -> (exists y (roslina(y) & jadalna(x,y))).
Slimak(x) -> (exists y (roslina(y) & jadalna(x,y))).
Wilk(x) & Lis(y) -> -jadalna(x,y).
Wilk(x) & Ziarno(y) -> -jadalna(x,y).
Ptak(x) & Slimak(y) -> -jadalna(x,y).
end_of_list.

formulas(goals).
(exists x exists y (zwierze(x) & zwierze(y) & jadalna(x,y) & (all z (Ziarno(z) -> jadalna(y,z))))).
end_of_list.

============================== end of input ==========================

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 Wilk(x) -> zwierze(x) # label(non_clause).  [assumption].
2 Lis(x) -> zwierze(x) # label(non_clause).  [assumption].
3 Ptak(x) -> zwierze(x) # label(non_clause).  [assumption].
4 Gasienica(x) -> zwierze(x) # label(non_clause).  [assumption].
5 Slimak(x) -> zwierze(x) # label(non_clause).  [assumption].
6 Ziarno(x) -> roslina(x) # label(non_clause).  [assumption].
7 (exists x Wilk(x)) # label(non_clause).  [assumption].
8 (exists x Lis(x)) # label(non_clause).  [assumption].
9 (exists x Ptak(x)) # label(non_clause).  [assumption].
10 (exists x Gasienica(x)) # label(non_clause).  [assumption].
11 (exists x Slimak(x)) # label(non_clause).  [assumption].
12 (exists x Ziarno(x)) # label(non_clause).  [assumption].
13 (all x (zwierze(x) -> (all y (roslina(y) -> jadalna(x,y))) | (all z (zwierze(z) & mniejsze(z,x) & (exists u (roslina(u) & jadalna(z,u))) -> jadalna(x,z))))) # label(non_clause).  [assumption].
14 Gasienica(x) & Ptak(y) -> mniejsze(x,y) # label(non_clause).  [assumption].
15 Slimak(x) & Ptak(y) -> mniejsze(x,y) # label(non_clause).  [assumption].
16 Ptak(x) & Lis(y) -> mniejsze(x,y) # label(non_clause).  [assumption].
17 Lis(x) & Wilk(y) -> mniejsze(x,y) # label(non_clause).  [assumption].
18 Ptak(x) & Gasienica(y) -> jadalna(x,y) # label(non_clause).  [assumption].
19 Gasienica(x) -> (exists y (roslina(y) & jadalna(x,y))) # label(non_clause).  [assumption].
20 Slimak(x) -> (exists y (roslina(y) & jadalna(x,y))) # label(non_clause).  [assumption].
21 Wilk(x) & Lis(y) -> -jadalna(x,y) # label(non_clause).  [assumption].
22 Wilk(x) & Ziarno(y) -> -jadalna(x,y) # label(non_clause).  [assumption].
23 Ptak(x) & Slimak(y) -> -jadalna(x,y) # label(non_clause).  [assumption].
24 (exists x exists y (zwierze(x) & zwierze(y) & jadalna(x,y) & (all z (Ziarno(z) -> jadalna(y,z))))) # label(non_clause) # label(goal).  [goal].

============================== end of process non-clausal formulas ===

============================== PROCESS INITIAL CLAUSES ===============

% Clauses before input processing:

formulas(usable).
end_of_list.

formulas(sos).
-Wilk(x) | zwierze(x).  [clausify(1)].
-Lis(x) | zwierze(x).  [clausify(2)].
-Ptak(x) | zwierze(x).  [clausify(3)].
-Gasienica(x) | zwierze(x).  [clausify(4)].
-Slimak(x) | zwierze(x).  [clausify(5)].
-Ziarno(x) | roslina(x).  [clausify(6)].
Wilk(c1).  [clausify(7)].
Lis(c2).  [clausify(8)].
Ptak(c3).  [clausify(9)].
Gasienica(c4).  [clausify(10)].
Slimak(c5).  [clausify(11)].
Ziarno(c6).  [clausify(12)].
-zwierze(x) | -roslina(y) | jadalna(x,y) | -zwierze(z) | -mniejsze(z,x) | -roslina(u) | -jadalna(z,u) | jadalna(x,z).  [clausify(13)].
-Gasienica(x) | -Ptak(y) | mniejsze(x,y).  [clausify(14)].
-Slimak(x) | -Ptak(y) | mniejsze(x,y).  [clausify(15)].
-Ptak(x) | -Lis(y) | mniejsze(x,y).  [clausify(16)].
-Lis(x) | -Wilk(y) | mniejsze(x,y).  [clausify(17)].
-Ptak(x) | -Gasienica(y) | jadalna(x,y).  [clausify(18)].
-Gasienica(x) | roslina(f1(x)).  [clausify(19)].
-Gasienica(x) | jadalna(x,f1(x)).  [clausify(19)].
-Slimak(x) | roslina(f2(x)).  [clausify(20)].
-Slimak(x) | jadalna(x,f2(x)).  [clausify(20)].
-Wilk(x) | -Lis(y) | -jadalna(x,y).  [clausify(21)].
-Wilk(x) | -Ziarno(y) | -jadalna(x,y).  [clausify(22)].
-Ptak(x) | -Slimak(y) | -jadalna(x,y).  [clausify(23)].
-zwierze(x) | -zwierze(y) | -jadalna(x,y) | Ziarno(f3(x,y)).  [deny(24)].
-zwierze(x) | -zwierze(y) | -jadalna(x,y) | -jadalna(y,f3(x,y)).  [deny(24)].
end_of_list.

formulas(demodulators).
end_of_list.

============================== PREDICATE ELIMINATION =================

Eliminating Wilk/1
25 Wilk(c1).  [clausify(7)].
26 -Wilk(x) | zwierze(x).  [clausify(1)].
Derived: zwierze(c1).  [resolve(25,a,26,a)].
27 -Lis(x) | -Wilk(y) | mniejsze(x,y).  [clausify(17)].
Derived: -Lis(x) | mniejsze(x,c1).  [resolve(27,b,25,a)].
28 -Wilk(x) | -Lis(y) | -jadalna(x,y).  [clausify(21)].
Derived: -Lis(x) | -jadalna(c1,x).  [resolve(28,a,25,a)].
29 -Wilk(x) | -Ziarno(y) | -jadalna(x,y).  [clausify(22)].
Derived: -Ziarno(x) | -jadalna(c1,x).  [resolve(29,a,25,a)].

Eliminating Lis/1
30 Lis(c2).  [clausify(8)].
31 -Lis(x) | zwierze(x).  [clausify(2)].
Derived: zwierze(c2).  [resolve(30,a,31,a)].
32 -Ptak(x) | -Lis(y) | mniejsze(x,y).  [clausify(16)].
Derived: -Ptak(x) | mniejsze(x,c2).  [resolve(32,b,30,a)].
33 -Lis(x) | mniejsze(x,c1).  [resolve(27,b,25,a)].
Derived: mniejsze(c2,c1).  [resolve(33,a,30,a)].
34 -Lis(x) | -jadalna(c1,x).  [resolve(28,a,25,a)].
Derived: -jadalna(c1,c2).  [resolve(34,a,30,a)].

Eliminating Ptak/1
35 Ptak(c3).  [clausify(9)].
36 -Ptak(x) | zwierze(x).  [clausify(3)].
Derived: zwierze(c3).  [resolve(35,a,36,a)].
37 -Gasienica(x) | -Ptak(y) | mniejsze(x,y).  [clausify(14)].
Derived: -Gasienica(x) | mniejsze(x,c3).  [resolve(37,b,35,a)].
38 -Slimak(x) | -Ptak(y) | mniejsze(x,y).  [clausify(15)].
Derived: -Slimak(x) | mniejsze(x,c3).  [resolve(38,b,35,a)].
39 -Ptak(x) | -Gasienica(y) | jadalna(x,y).  [clausify(18)].
Derived: -Gasienica(x) | jadalna(c3,x).  [resolve(39,a,35,a)].
40 -Ptak(x) | -Slimak(y) | -jadalna(x,y).  [clausify(23)].
Derived: -Slimak(x) | -jadalna(c3,x).  [resolve(40,a,35,a)].
41 -Ptak(x) | mniejsze(x,c2).  [resolve(32,b,30,a)].
Derived: mniejsze(c3,c2).  [resolve(41,a,35,a)].

Eliminating Gasienica/1
42 Gasienica(c4).  [clausify(10)].
43 -Gasienica(x) | zwierze(x).  [clausify(4)].
Derived: zwierze(c4).  [resolve(42,a,43,a)].
44 -Gasienica(x) | roslina(f1(x)).  [clausify(19)].
Derived: roslina(f1(c4)).  [resolve(44,a,42,a)].
45 -Gasienica(x) | jadalna(x,f1(x)).  [clausify(19)].
Derived: jadalna(c4,f1(c4)).  [resolve(45,a,42,a)].
46 -Gasienica(x) | mniejsze(x,c3).  [resolve(37,b,35,a)].
Derived: mniejsze(c4,c3).  [resolve(46,a,42,a)].
47 -Gasienica(x) | jadalna(c3,x).  [resolve(39,a,35,a)].
Derived: jadalna(c3,c4).  [resolve(47,a,42,a)].

Eliminating Slimak/1
48 Slimak(c5).  [clausify(11)].
49 -Slimak(x) | zwierze(x).  [clausify(5)].
Derived: zwierze(c5).  [resolve(48,a,49,a)].
50 -Slimak(x) | roslina(f2(x)).  [clausify(20)].
Derived: roslina(f2(c5)).  [resolve(50,a,48,a)].
51 -Slimak(x) | jadalna(x,f2(x)).  [clausify(20)].
Derived: jadalna(c5,f2(c5)).  [resolve(51,a,48,a)].
52 -Slimak(x) | mniejsze(x,c3).  [resolve(38,b,35,a)].
Derived: mniejsze(c5,c3).  [resolve(52,a,48,a)].
53 -Slimak(x) | -jadalna(c3,x).  [resolve(40,a,35,a)].
Derived: -jadalna(c3,c5).  [resolve(53,a,48,a)].

Eliminating Ziarno/1
54 Ziarno(c6).  [clausify(12)].
55 -Ziarno(x) | roslina(x).  [clausify(6)].
Derived: roslina(c6).  [resolve(54,a,55,a)].
56 -zwierze(x) | -zwierze(y) | -jadalna(x,y) | Ziarno(f3(x,y)).  [deny(24)].
Derived: -zwierze(x) | -zwierze(y) | -jadalna(x,y) | roslina(f3(x,y)).  [resolve(56,d,55,a)].
57 -Ziarno(x) | -jadalna(c1,x).  [resolve(29,a,25,a)].
Derived: -jadalna(c1,c6).  [resolve(57,a,54,a)].
Derived: -jadalna(c1,f3(x,y)) | -zwierze(x) | -zwierze(y) | -jadalna(x,y).  [resolve(57,a,56,d)].

Eliminating mniejsze/2
58 mniejsze(c2,c1).  [resolve(33,a,30,a)].
59 -zwierze(x) | -roslina(y) | jadalna(x,y) | -zwierze(z) | -mniejsze(z,x) | -roslina(u) | -jadalna(z,u) | jadalna(x,z).  [clausify(13)].
Derived: -zwierze(c1) | -roslina(x) | jadalna(c1,x) | -zwierze(c2) | -roslina(y) | -jadalna(c2,y) | jadalna(c1,c2).  [resolve(58,a,59,e)].
60 mniejsze(c3,c2).  [resolve(41,a,35,a)].
Derived: -zwierze(c2) | -roslina(x) | jadalna(c2,x) | -zwierze(c3) | -roslina(y) | -jadalna(c3,y) | jadalna(c2,c3).  [resolve(60,a,59,e)].
61 mniejsze(c4,c3).  [resolve(46,a,42,a)].
62 mniejsze(c5,c3).  [resolve(52,a,48,a)].
Derived: -zwierze(c3) | -roslina(x) | jadalna(c3,x) | -zwierze(c5) | -roslina(y) | -jadalna(c5,y) | jadalna(c3,c5).  [resolve(62,a,59,e)].

============================== end predicate elimination =============

Auto_denials:  (non-Horn, no changes).

Term ordering decisions:
Predicate symbol precedence:  predicate_order([ zwierze, roslina, jadalna ]).
Function symbol precedence:  function_order([ c1, c2, c3, c4, c5, c6, f3, f1, f2 ]).
After inverse_order:  (no changes).
Unfolding symbols: (none).

Auto_inference settings:
  % set(binary_resolution).  % (non-Horn)
  % set(neg_ur_resolution).  % (non-Horn, less than 100 clauses)

Auto_process settings:
  % set(factor).  % (non-Horn)
  % set(unit_deletion).  % (non-Horn)

kept:      63 -zwierze(x) | -zwierze(y) | -jadalna(x,y) | -jadalna(y,f3(x,y)).  [deny(24)].
kept:      64 zwierze(c1).  [resolve(25,a,26,a)].
kept:      65 zwierze(c2).  [resolve(30,a,31,a)].
kept:      66 -jadalna(c1,c2).  [resolve(34,a,30,a)].
kept:      67 zwierze(c3).  [resolve(35,a,36,a)].
kept:      68 zwierze(c4).  [resolve(42,a,43,a)].
kept:      69 roslina(f1(c4)).  [resolve(44,a,42,a)].
kept:      70 jadalna(c4,f1(c4)).  [resolve(45,a,42,a)].
kept:      71 jadalna(c3,c4).  [resolve(47,a,42,a)].
kept:      72 zwierze(c5).  [resolve(48,a,49,a)].
kept:      73 roslina(f2(c5)).  [resolve(50,a,48,a)].
kept:      74 jadalna(c5,f2(c5)).  [resolve(51,a,48,a)].
kept:      75 -jadalna(c3,c5).  [resolve(53,a,48,a)].
kept:      76 roslina(c6).  [resolve(54,a,55,a)].
kept:      77 -zwierze(x) | -zwierze(y) | -jadalna(x,y) | roslina(f3(x,y)).  [resolve(56,d,55,a)].
kept:      78 -jadalna(c1,c6).  [resolve(57,a,54,a)].
kept:      79 -jadalna(c1,f3(x,y)) | -zwierze(x) | -zwierze(y) | -jadalna(x,y).  [resolve(57,a,56,d)].
           80 -zwierze(c1) | -roslina(x) | jadalna(c1,x) | -zwierze(c2) | -roslina(y) | -jadalna(c2,y) | jadalna(c1,c2).  [resolve(58,a,59,e)].
kept:      81 -roslina(x) | jadalna(c1,x) | -roslina(y) | -jadalna(c2,y).  [copy(80),unit_del(a,64),unit_del(d,65),unit_del(g,66)].
           82 -zwierze(c2) | -roslina(x) | jadalna(c2,x) | -zwierze(c3) | -roslina(y) | -jadalna(c3,y) | jadalna(c2,c3).  [resolve(60,a,59,e)].
kept:      83 -roslina(x) | jadalna(c2,x) | -roslina(y) | -jadalna(c3,y) | jadalna(c2,c3).  [copy(82),unit_del(a,65),unit_del(d,67)].
           84 -zwierze(c3) | -roslina(x) | jadalna(c3,x) | -zwierze(c5) | -roslina(y) | -jadalna(c5,y) | jadalna(c3,c5).  [resolve(62,a,59,e)].
kept:      85 -roslina(x) | jadalna(c3,x) | -roslina(y) | -jadalna(c5,y).  [copy(84),unit_del(a,67),unit_del(d,72),unit_del(g,75)].
kept:      86 -zwierze(x) | -jadalna(x,x) | -jadalna(x,f3(x,x)).  [factor(63,a,b)].
kept:      87 -zwierze(x) | -jadalna(x,x) | roslina(f3(x,x)).  [factor(77,a,b)].
kept:      88 -jadalna(c1,f3(x,x)) | -zwierze(x) | -jadalna(x,x).  [factor(79,b,c)].
kept:      89 -roslina(x) | jadalna(c1,x) | -jadalna(c2,x).  [factor(81,a,c)].
kept:      90 -roslina(x) | jadalna(c2,x) | -jadalna(c3,x) | jadalna(c2,c3).  [factor(83,a,c)].
kept:      91 -roslina(c3) | jadalna(c2,c3) | -roslina(x) | -jadalna(c3,x).  [factor(83,b,e)].
kept:      92 -roslina(x) | jadalna(c3,x) | -jadalna(c5,x).  [factor(85,a,c)].
kept:      93 -roslina(c3) | jadalna(c2,c3) | -jadalna(c3,c3).  [factor(90,b,d)].

============================== end of process initial clauses ========

============================== CLAUSES FOR SEARCH ====================

% Clauses after input processing:

formulas(usable).
end_of_list.

formulas(sos).
63 -zwierze(x) | -zwierze(y) | -jadalna(x,y) | -jadalna(y,f3(x,y)).  [deny(24)].
64 zwierze(c1).  [resolve(25,a,26,a)].
65 zwierze(c2).  [resolve(30,a,31,a)].
66 -jadalna(c1,c2).  [resolve(34,a,30,a)].
67 zwierze(c3).  [resolve(35,a,36,a)].
68 zwierze(c4).  [resolve(42,a,43,a)].
69 roslina(f1(c4)).  [resolve(44,a,42,a)].
70 jadalna(c4,f1(c4)).  [resolve(45,a,42,a)].
71 jadalna(c3,c4).  [resolve(47,a,42,a)].
72 zwierze(c5).  [resolve(48,a,49,a)].
73 roslina(f2(c5)).  [resolve(50,a,48,a)].
74 jadalna(c5,f2(c5)).  [resolve(51,a,48,a)].
75 -jadalna(c3,c5).  [resolve(53,a,48,a)].
76 roslina(c6).  [resolve(54,a,55,a)].
77 -zwierze(x) | -zwierze(y) | -jadalna(x,y) | roslina(f3(x,y)).  [resolve(56,d,55,a)].
78 -jadalna(c1,c6).  [resolve(57,a,54,a)].
79 -jadalna(c1,f3(x,y)) | -zwierze(x) | -zwierze(y) | -jadalna(x,y).  [resolve(57,a,56,d)].
81 -roslina(x) | jadalna(c1,x) | -roslina(y) | -jadalna(c2,y).  [copy(80),unit_del(a,64),unit_del(d,65),unit_del(g,66)].
83 -roslina(x) | jadalna(c2,x) | -roslina(y) | -jadalna(c3,y) | jadalna(c2,c3).  [copy(82),unit_del(a,65),unit_del(d,67)].
85 -roslina(x) | jadalna(c3,x) | -roslina(y) | -jadalna(c5,y).  [copy(84),unit_del(a,67),unit_del(d,72),unit_del(g,75)].
86 -zwierze(x) | -jadalna(x,x) | -jadalna(x,f3(x,x)).  [factor(63,a,b)].
87 -zwierze(x) | -jadalna(x,x) | roslina(f3(x,x)).  [factor(77,a,b)].
88 -jadalna(c1,f3(x,x)) | -zwierze(x) | -jadalna(x,x).  [factor(79,b,c)].
89 -roslina(x) | jadalna(c1,x) | -jadalna(c2,x).  [factor(81,a,c)].
90 -roslina(x) | jadalna(c2,x) | -jadalna(c3,x) | jadalna(c2,c3).  [factor(83,a,c)].
91 -roslina(c3) | jadalna(c2,c3) | -roslina(x) | -jadalna(c3,x).  [factor(83,b,e)].
92 -roslina(x) | jadalna(c3,x) | -jadalna(c5,x).  [factor(85,a,c)].
93 -roslina(c3) | jadalna(c2,c3) | -jadalna(c3,c3).  [factor(90,b,d)].
end_of_list.

formulas(demodulators).
end_of_list.

============================== end of clauses for search =============

============================== SEARCH ================================

% Starting search at 0.01 seconds.

given #1 (I,wt=12): 63 -zwierze(x) | -zwierze(y) | -jadalna(x,y) | -jadalna(y,f3(x,y)).  [deny(24)].

given #2 (I,wt=2): 64 zwierze(c1).  [resolve(25,a,26,a)].

given #3 (I,wt=2): 65 zwierze(c2).  [resolve(30,a,31,a)].

given #4 (I,wt=3): 66 -jadalna(c1,c2).  [resolve(34,a,30,a)].

given #5 (I,wt=2): 67 zwierze(c3).  [resolve(35,a,36,a)].

given #6 (I,wt=2): 68 zwierze(c4).  [resolve(42,a,43,a)].

given #7 (I,wt=3): 69 roslina(f1(c4)).  [resolve(44,a,42,a)].

given #8 (I,wt=4): 70 jadalna(c4,f1(c4)).  [resolve(45,a,42,a)].

given #9 (I,wt=3): 71 jadalna(c3,c4).  [resolve(47,a,42,a)].

given #10 (I,wt=2): 72 zwierze(c5).  [resolve(48,a,49,a)].

given #11 (I,wt=3): 73 roslina(f2(c5)).  [resolve(50,a,48,a)].

given #12 (I,wt=4): 74 jadalna(c5,f2(c5)).  [resolve(51,a,48,a)].

given #13 (I,wt=3): 75 -jadalna(c3,c5).  [resolve(53,a,48,a)].

given #14 (I,wt=2): 76 roslina(c6).  [resolve(54,a,55,a)].

given #15 (I,wt=11): 77 -zwierze(x) | -zwierze(y) | -jadalna(x,y) | roslina(f3(x,y)).  [resolve(56,d,55,a)].

given #16 (I,wt=3): 78 -jadalna(c1,c6).  [resolve(57,a,54,a)].

given #17 (I,wt=12): 79 -jadalna(c1,f3(x,y)) | -zwierze(x) | -zwierze(y) | -jadalna(x,y).  [resolve(57,a,56,d)].

given #18 (I,wt=10): 81 -roslina(x) | jadalna(c1,x) | -roslina(y) | -jadalna(c2,y).  [copy(80),unit_del(a,64),unit_del(d,65),unit_del(g,66)].

given #19 (I,wt=13): 83 -roslina(x) | jadalna(c2,x) | -roslina(y) | -jadalna(c3,y) | jadalna(c2,c3).  [copy(82),unit_del(a,65),unit_del(d,67)].

given #20 (I,wt=10): 85 -roslina(x) | jadalna(c3,x) | -roslina(y) | -jadalna(c5,y).  [copy(84),unit_del(a,67),unit_del(d,72),unit_del(g,75)].

given #21 (I,wt=10): 86 -zwierze(x) | -jadalna(x,x) | -jadalna(x,f3(x,x)).  [factor(63,a,b)].

given #22 (I,wt=9): 87 -zwierze(x) | -jadalna(x,x) | roslina(f3(x,x)).  [factor(77,a,b)].

given #23 (I,wt=10): 88 -jadalna(c1,f3(x,x)) | -zwierze(x) | -jadalna(x,x).  [factor(79,b,c)].

given #24 (I,wt=8): 89 -roslina(x) | jadalna(c1,x) | -jadalna(c2,x).  [factor(81,a,c)].

given #25 (I,wt=11): 90 -roslina(x) | jadalna(c2,x) | -jadalna(c3,x) | jadalna(c2,c3).  [factor(83,a,c)].

given #26 (I,wt=10): 91 -roslina(c3) | jadalna(c2,c3) | -roslina(x) | -jadalna(c3,x).  [factor(83,b,e)].

given #27 (I,wt=8): 93 -roslina(c3) | jadalna(c2,c3) | -jadalna(c3,c3).  [factor(90,b,d)].

given #28 (A,wt=10): 94 -zwierze(f1(c4)) | -jadalna(f1(c4),f3(c4,f1(c4))).  [resolve(70,a,63,c),unit_del(a,68)].

given #29 (F,wt=2): 110 -roslina(c5).  [ur(85,b,75,a,c,73,a,d,74,a)].

given #30 (F,wt=3): 103 -jadalna(c2,c6).  [ur(81,a,76,a,b,78,a,c,76,a)].

given #31 (F,wt=4): 104 -jadalna(c2,f2(c5)).  [ur(81,a,76,a,b,78,a,c,73,a)].

given #32 (F,wt=4): 105 -jadalna(c2,f1(c4)).  [ur(81,a,76,a,b,78,a,c,69,a)].

given #33 (T,wt=4): 98 roslina(f3(c3,c4)).  [resolve(77,c,71,a),unit_del(a,67),unit_del(b,68)].

given #34 (T,wt=5): 109 -roslina(x) | jadalna(c3,x).  [resolve(85,d,74,a),unit_del(c,73)].

given #35 (T,wt=3): 113 jadalna(c3,c6).  [resolve(109,a,76,a)].

given #36 (T,wt=3): 117 jadalna(c2,c3).  [resolve(113,a,90,c),unit_del(a,76),unit_del(b,103)].

given #37 (A,wt=5): 95 -jadalna(c4,f3(c3,c4)).  [resolve(71,a,63,c),unit_del(a,67),unit_del(b,68)].

given #38 (F,wt=2): 126 -roslina(c3).  [ur(81,a,76,a,b,78,a,d,117,a)].

given #39 (F,wt=5): 101 -jadalna(c1,f3(c3,c4)).  [resolve(79,d,71,a),unit_del(b,67),unit_del(c,68)].

given #40 (F,wt=5): 111 -jadalna(c2,f3(c3,c4)).  [ur(81,a,76,a,b,78,a,c,98,a)].

given #41 (F,wt=5): 123 -jadalna(c1,f3(c2,c3)).  [resolve(117,a,79,d),unit_del(b,65),unit_del(c,67)].

given #42 (T,wt=4): 114 jadalna(c3,f2(c5)).  [resolve(109,a,73,a)].

given #43 (T,wt=4): 115 jadalna(c3,f1(c4)).  [resolve(109,a,69,a)].

given #44 (T,wt=4): 124 roslina(f3(c2,c3)).  [resolve(117,a,77,c),unit_del(a,65),unit_del(b,67)].

============================== PROOF =================================

% Proof 1 at 0.01 (+ 0.00) seconds.
% Length of proof is 74.
% Level of proof is 10.
% Maximum clause weight is 13.000.
% Given clauses 44.

1 Wilk(x) -> zwierze(x) # label(non_clause).  [assumption].
2 Lis(x) -> zwierze(x) # label(non_clause).  [assumption].
3 Ptak(x) -> zwierze(x) # label(non_clause).  [assumption].
5 Slimak(x) -> zwierze(x) # label(non_clause).  [assumption].
6 Ziarno(x) -> roslina(x) # label(non_clause).  [assumption].
7 (exists x Wilk(x)) # label(non_clause).  [assumption].
8 (exists x Lis(x)) # label(non_clause).  [assumption].
9 (exists x Ptak(x)) # label(non_clause).  [assumption].
11 (exists x Slimak(x)) # label(non_clause).  [assumption].
12 (exists x Ziarno(x)) # label(non_clause).  [assumption].
13 (all x (zwierze(x) -> (all y (roslina(y) -> jadalna(x,y))) | (all z (zwierze(z) & mniejsze(z,x) & (exists u (roslina(u) & jadalna(z,u))) -> jadalna(x,z))))) # label(non_clause).  [assumption].
15 Slimak(x) & Ptak(y) -> mniejsze(x,y) # label(non_clause).  [assumption].
16 Ptak(x) & Lis(y) -> mniejsze(x,y) # label(non_clause).  [assumption].
17 Lis(x) & Wilk(y) -> mniejsze(x,y) # label(non_clause).  [assumption].
20 Slimak(x) -> (exists y (roslina(y) & jadalna(x,y))) # label(non_clause).  [assumption].
21 Wilk(x) & Lis(y) -> -jadalna(x,y) # label(non_clause).  [assumption].
22 Wilk(x) & Ziarno(y) -> -jadalna(x,y) # label(non_clause).  [assumption].
23 Ptak(x) & Slimak(y) -> -jadalna(x,y) # label(non_clause).  [assumption].
24 (exists x exists y (zwierze(x) & zwierze(y) & jadalna(x,y) & (all z (Ziarno(z) -> jadalna(y,z))))) # label(non_clause) # label(goal).  [goal].
25 Wilk(c1).  [clausify(7)].
26 -Wilk(x) | zwierze(x).  [clausify(1)].
27 -Lis(x) | -Wilk(y) | mniejsze(x,y).  [clausify(17)].
28 -Wilk(x) | -Lis(y) | -jadalna(x,y).  [clausify(21)].
29 -Wilk(x) | -Ziarno(y) | -jadalna(x,y).  [clausify(22)].
30 Lis(c2).  [clausify(8)].
31 -Lis(x) | zwierze(x).  [clausify(2)].
32 -Ptak(x) | -Lis(y) | mniejsze(x,y).  [clausify(16)].
33 -Lis(x) | mniejsze(x,c1).  [resolve(27,b,25,a)].
34 -Lis(x) | -jadalna(c1,x).  [resolve(28,a,25,a)].
35 Ptak(c3).  [clausify(9)].
36 -Ptak(x) | zwierze(x).  [clausify(3)].
38 -Slimak(x) | -Ptak(y) | mniejsze(x,y).  [clausify(15)].
40 -Ptak(x) | -Slimak(y) | -jadalna(x,y).  [clausify(23)].
41 -Ptak(x) | mniejsze(x,c2).  [resolve(32,b,30,a)].
48 Slimak(c5).  [clausify(11)].
49 -Slimak(x) | zwierze(x).  [clausify(5)].
50 -Slimak(x) | roslina(f2(x)).  [clausify(20)].
51 -Slimak(x) | jadalna(x,f2(x)).  [clausify(20)].
52 -Slimak(x) | mniejsze(x,c3).  [resolve(38,b,35,a)].
53 -Slimak(x) | -jadalna(c3,x).  [resolve(40,a,35,a)].
54 Ziarno(c6).  [clausify(12)].
55 -Ziarno(x) | roslina(x).  [clausify(6)].
56 -zwierze(x) | -zwierze(y) | -jadalna(x,y) | Ziarno(f3(x,y)).  [deny(24)].
57 -Ziarno(x) | -jadalna(c1,x).  [resolve(29,a,25,a)].
58 mniejsze(c2,c1).  [resolve(33,a,30,a)].
59 -zwierze(x) | -roslina(y) | jadalna(x,y) | -zwierze(z) | -mniejsze(z,x) | -roslina(u) | -jadalna(z,u) | jadalna(x,z).  [clausify(13)].
60 mniejsze(c3,c2).  [resolve(41,a,35,a)].
62 mniejsze(c5,c3).  [resolve(52,a,48,a)].
63 -zwierze(x) | -zwierze(y) | -jadalna(x,y) | -jadalna(y,f3(x,y)).  [deny(24)].
64 zwierze(c1).  [resolve(25,a,26,a)].
65 zwierze(c2).  [resolve(30,a,31,a)].
66 -jadalna(c1,c2).  [resolve(34,a,30,a)].
67 zwierze(c3).  [resolve(35,a,36,a)].
72 zwierze(c5).  [resolve(48,a,49,a)].
73 roslina(f2(c5)).  [resolve(50,a,48,a)].
74 jadalna(c5,f2(c5)).  [resolve(51,a,48,a)].
75 -jadalna(c3,c5).  [resolve(53,a,48,a)].
76 roslina(c6).  [resolve(54,a,55,a)].
77 -zwierze(x) | -zwierze(y) | -jadalna(x,y) | roslina(f3(x,y)).  [resolve(56,d,55,a)].
78 -jadalna(c1,c6).  [resolve(57,a,54,a)].
80 -zwierze(c1) | -roslina(x) | jadalna(c1,x) | -zwierze(c2) | -roslina(y) | -jadalna(c2,y) | jadalna(c1,c2).  [resolve(58,a,59,e)].
81 -roslina(x) | jadalna(c1,x) | -roslina(y) | -jadalna(c2,y).  [copy(80),unit_del(a,64),unit_del(d,65),unit_del(g,66)].
82 -zwierze(c2) | -roslina(x) | jadalna(c2,x) | -zwierze(c3) | -roslina(y) | -jadalna(c3,y) | jadalna(c2,c3).  [resolve(60,a,59,e)].
83 -roslina(x) | jadalna(c2,x) | -roslina(y) | -jadalna(c3,y) | jadalna(c2,c3).  [copy(82),unit_del(a,65),unit_del(d,67)].
84 -zwierze(c3) | -roslina(x) | jadalna(c3,x) | -zwierze(c5) | -roslina(y) | -jadalna(c5,y) | jadalna(c3,c5).  [resolve(62,a,59,e)].
85 -roslina(x) | jadalna(c3,x) | -roslina(y) | -jadalna(c5,y).  [copy(84),unit_del(a,67),unit_del(d,72),unit_del(g,75)].
90 -roslina(x) | jadalna(c2,x) | -jadalna(c3,x) | jadalna(c2,c3).  [factor(83,a,c)].
103 -jadalna(c2,c6).  [ur(81,a,76,a,b,78,a,c,76,a)].
109 -roslina(x) | jadalna(c3,x).  [resolve(85,d,74,a),unit_del(c,73)].
113 jadalna(c3,c6).  [resolve(109,a,76,a)].
117 jadalna(c2,c3).  [resolve(113,a,90,c),unit_del(a,76),unit_del(b,103)].
124 roslina(f3(c2,c3)).  [resolve(117,a,77,c),unit_del(a,65),unit_del(b,67)].
125 -jadalna(c3,f3(c2,c3)).  [resolve(117,a,63,c),unit_del(a,65),unit_del(b,67)].
133 $F.  [resolve(124,a,109,a),unit_del(a,125)].

============================== end of proof ==========================

============================== STATISTICS ============================

Given=44. Generated=85. Kept=67. proofs=1.
Usable=39. Sos=16. Demods=0. Limbo=0, Disabled=70. Hints=0.
Kept_by_rule=0, Deleted_by_rule=0.
Forward_subsumed=17. Back_subsumed=12.
Sos_limit_deleted=0. Sos_displaced=0. Sos_removed=0.
New_demodulators=0 (0 lex), Back_demodulated=0. Back_unit_deleted=0.
Demod_attempts=0. Demod_rewrites=0.
Res_instance_prunes=0. Para_instance_prunes=0. Basic_paramod_prunes=0.
Nonunit_fsub_feature_tests=9. Nonunit_bsub_feature_tests=66.
Megabytes=0.18.
User_CPU=0.01, System_CPU=0.00, Wall_clock=0.

============================== end of statistics =====================

============================== end of search =========================

THEOREM PROVED

Exiting with 1 proof.

Process 2334 exit (max_proofs) Mon Jan 22 15:06:19 2018
