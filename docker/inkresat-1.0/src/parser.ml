type token =
  | NEG
  | AND
  | OR
  | LPAR
  | RPAR
  | EOF
  | TRUE
  | FALSE
  | EQUIV
  | IMPLIES
  | ID of (string)
  | DIA of (string)
  | BOX of (string)

open Parsing;;
# 28 "parser.mly"
  open Syntax
# 20 "parser.ml"
let yytransl_const = [|
  257 (* NEG *);
  258 (* AND *);
  259 (* OR *);
  260 (* LPAR *);
  261 (* RPAR *);
    0 (* EOF *);
  262 (* TRUE *);
  263 (* FALSE *);
  264 (* EQUIV *);
  265 (* IMPLIES *);
    0|]

let yytransl_block = [|
  266 (* ID *);
  267 (* DIA *);
  268 (* BOX *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\000\000"

let yylen = "\002\000\
\002\000\001\000\001\000\001\000\003\000\003\000\003\000\003\000\
\003\000\002\000\002\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\003\000\004\000\002\000\000\000\
\000\000\013\000\000\000\010\000\000\000\011\000\012\000\000\000\
\000\000\001\000\000\000\000\000\005\000\009\000\000\000\000\000\
\000\000"

let yydgoto = "\002\000\
\010\000\011\000"

let yysindex = "\255\255\
\019\255\000\000\019\255\019\255\000\000\000\000\000\000\019\255\
\019\255\000\000\001\000\000\000\030\255\000\000\000\000\019\255\
\019\255\000\000\019\255\019\255\000\000\000\000\000\255\025\255\
\025\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\003\000\008\000\
\009\000"

let yygindex = "\000\000\
\000\000\002\000"

let yytablesize = 273
let yytable = "\001\000\
\018\000\016\000\008\000\000\000\012\000\013\000\000\000\006\000\
\007\000\014\000\015\000\000\000\000\000\000\000\000\000\000\000\
\000\000\022\000\023\000\003\000\024\000\025\000\004\000\000\000\
\005\000\006\000\016\000\017\000\007\000\008\000\009\000\016\000\
\017\000\020\000\021\000\000\000\000\000\019\000\020\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\016\000\017\000\000\000\008\000\000\000\008\000\
\019\000\020\000\008\000\008\000\006\000\007\000\000\000\006\000\
\007\000"

let yycheck = "\001\000\
\000\000\002\001\000\000\255\255\003\000\004\000\255\255\000\000\
\000\000\008\000\009\000\255\255\255\255\255\255\255\255\255\255\
\255\255\016\000\017\000\001\001\019\000\020\000\004\001\255\255\
\006\001\007\001\002\001\003\001\010\001\011\001\012\001\002\001\
\003\001\009\001\005\001\255\255\255\255\008\001\009\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\002\001\003\001\255\255\003\001\255\255\005\001\
\008\001\009\001\008\001\009\001\005\001\005\001\255\255\008\001\
\008\001"

let yynames_const = "\
  NEG\000\
  AND\000\
  OR\000\
  LPAR\000\
  RPAR\000\
  EOF\000\
  TRUE\000\
  FALSE\000\
  EQUIV\000\
  IMPLIES\000\
  "

let yynames_block = "\
  ID\000\
  DIA\000\
  BOX\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Syntax.xformula) in
    Obj.repr(
# 45 "parser.mly"
                                   ( _1 )
# 173 "parser.ml"
               : Syntax.xformula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 46 "parser.mly"
                                   ( try XVar(Hashtbl.find var_of_string _1) with
					 Not_found -> let n = !num_vars in
					   Hashtbl.add var_of_string _1 n; num_vars := n+1; XVar n )
# 182 "parser.ml"
               : Syntax.xformula))
; (fun __caml_parser_env ->
    Obj.repr(
# 49 "parser.mly"
                                   ( XTrue )
# 188 "parser.ml"
               : Syntax.xformula))
; (fun __caml_parser_env ->
    Obj.repr(
# 50 "parser.mly"
                                   ( XFalse )
# 194 "parser.ml"
               : Syntax.xformula))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Syntax.xformula) in
    Obj.repr(
# 51 "parser.mly"
                                   ( _2 )
# 201 "parser.ml"
               : Syntax.xformula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.xformula) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.xformula) in
    Obj.repr(
# 52 "parser.mly"
                                   ( XOr [XAnd [_1; _3]; XAnd [XNeg _1; XNeg _3]] )
# 209 "parser.ml"
               : Syntax.xformula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.xformula) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.xformula) in
    Obj.repr(
# 53 "parser.mly"
                                   ( XOr [XNeg _1; _3] )
# 217 "parser.ml"
               : Syntax.xformula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.xformula) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.xformula) in
    Obj.repr(
# 54 "parser.mly"
                                   ( match _1, _3 with
					 XOr fs, XOr fs' -> XOr (List.rev_append fs fs')
				       | XOr fs, f' -> XOr (f' :: fs)
				       | f, XOr fs' -> XOr (f :: fs')
				       | f, f' -> XOr [f;f'] )
# 229 "parser.ml"
               : Syntax.xformula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.xformula) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.xformula) in
    Obj.repr(
# 59 "parser.mly"
                                   ( match _1, _3 with
					 XAnd fs, XAnd fs' -> XAnd (List.rev_append fs fs')
				       | XAnd fs, f' -> XAnd (f' :: fs)
				       | f, XAnd fs' -> XAnd (f :: fs')
				       | f, f' -> XAnd [f;f'] )
# 241 "parser.ml"
               : Syntax.xformula))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.xformula) in
    Obj.repr(
# 64 "parser.mly"
                                   ( XNeg _2 )
# 248 "parser.ml"
               : Syntax.xformula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.xformula) in
    Obj.repr(
# 65 "parser.mly"
                                   ( try XDia(Hashtbl.find rel_of_string _1, _2) with
					 Not_found -> let n = !num_rels in
					   Hashtbl.add rel_of_string _1 n; num_rels := n+1; XDia (n, _2) )
# 258 "parser.ml"
               : Syntax.xformula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.xformula) in
    Obj.repr(
# 68 "parser.mly"
                                   ( try XBox(Hashtbl.find rel_of_string _1, _2) with
					 Not_found -> let n = !num_rels in
					   Hashtbl.add rel_of_string _1 n; num_rels := n+1; XBox (n, _2) )
# 268 "parser.ml"
               : Syntax.xformula))
(* Entry file *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let file (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.xformula)
;;
